nav{
  width: 100%;
  background-color: #00BFFF;
  display: grid;
  width: 100%;
  word-wrap: break-word;
  text-align: center;
   grid-template-columns: auto ;
  font-size: 1.5em;
   grid-column-gap: 1em;
 }
#logo{
  float:right;
  font-size: 1.0em;
  align-self: center;
}

#home{
  grid-column: 1 /2;
  text-align: center;
}
#stocks{
  grid-column: 2 /3;
  text-align: center;
}
nav ul{
   grid-column: 1 / 5;
   margin: 0;
  padding-top: 0em;
  padding-left: 0em;
}
nav a{
  color:#191970;
   /* text-transform:uppercase; */
 }
nav li{

  display: inline-block;
  padding: 1em;
  color:#191970;
}
nav a:hover{
  color: white;
}



  /* @media screen and (max-width: 600px) {
   .col-25, .col-75, input[type=submit] {
     width: 100%;
     margin-top: 0;
   }
 }  */




/* @media screen and (max-width:800px){
  header {
    display: grid;
    grid-template-columns: 1fr auto minmax(600px, 1fr) 1fr;
  }
  .logo{ */
    /* gird-column: 5/6;
  } */
  /*  above we have 4 columns and we have logo in column four spans to 5*/
  /* nav {

    grid-column: 3/4;
  }

} */

/* padding: 10px 20px 10px 20px;

These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions. */

/* .smaller-image, .thick-green-border {
    width: 100px;
    border-color:green;
    border-width: 10px;
    border-style: solid;
     border-radius: 10px;(rounds out the square border)
     border-radius: 50%;
  } */

  /* .blue-box {
    background-color: blue;
    color: #fff;
    padding-top: 40px;
    padding-right: 20px;
    padding-bottom: 20px;
    padding-left: 40px; */

  /* An element's padding controls the amount of space between the element's content and its border. */

  /* An element's margin controls the amount of space between an element's border and surrounding elements. */

  /* <h1 style="color: green"id="orange-text" class="pink-text blue-text">Hello World!</h1>
  here^^^^^ style takes precedent over the other class and ids. just put style in the tag */

  /* .pink-text {
    color: pink !important;
  }  */



/* text-align: justify; causes all lines of text except the last line to meet the left and right edges of the line box.

text-align: center; centers the text

text-align: right; right-aligns the text

And text-align: left; (the default) left-aligns the text. */


/* <strong>Stanford University</strong> (bold)*/
 /* (underline)<u>Ph.D. students</u> */
 /* <em> around a sentence italisized */
 /* horizontal line <hr> */
 /* button {
  border-radius: 5px;
  color: white;
  background-color: #0F5897;
  padding: 5px 10px 8px 10px;
} */

/* Here's an example of a media query that returns the content when the device's width is less than or equal to 100px:

@media (max-width: 100px)

/* and the following media query returns the content when the device's height is more than or equal to 350px:

@media (min-height: 350px)

/* Remember, the CSS inside the media query is applied only if the media type matches that of the device being used. */

 /* You can use:

img {
  max-width: 100%;
  display: block;
  height: auto;
}
The max-width property of 100% scales the image to fit the width of its container, but the image won't stretch wider than its original width. Setting the display property to block changes the image from an inline element (its default), to a block element on its own line. The height property of auto keeps the original aspect ratio of the image.


Add style rules for the img tag to make it responsive to the size of its container. It should display as a block-level element, it should fit the full width of its container without stretching, and it should keep its original aspect ratio. */

/* flex-box------------------------- */
/*   #box-container {
    height: 500px;
    display: flex;
  } */

  /*  header .profile-name {
    display: flex;
    flex-direction:column; */


/* justify content is for vertical side to side movement */
/* justify-content:center;
/* justify-content:flex-start;*/

    /* flex-start: aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container.



flex-end: aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.

space-between: aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the other items between them are spaced evenly.

space-around: similar to space-between but the first and last items are not locked to the edges of the container, the space is distributed around all the items

 */
/* align items is for vertical movement up or down */
 /*align-items:baseline;

 flex-start: aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container.

flex-end: aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container.

center: align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).

stretch: stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom.

baseline: align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on.*/
/*
.container {
  font-size: 40px;
  min-height: 300px;
  width: 100%;
  background: LightGray;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr;
  grid-gap: 10px;
} */







/* css grid  */
/* grid-template-columns: auto 50px 10% 2fr 1fr; */
/* grid-column-gap: 10px; */
/* grid-row-gap:5px; */
/* grid-gap: 10px 20px;
rows, columns */
/* grid-column: 1 / 3; takes up columns 1 - 3 */
/* grid-row:2/4; takes rows 2 to 4 */
/* justify-self: center; start and end work too LEFT TO RIGHT
/* align-self:end; start center Up and Down */

/* @media (min-width: 400px){
   .container{ */
     /* change the code below this line */

     /* grid-template-areas:
       "header header"
       "advert content"
       "footer footer"; */

       /* @media (min-width: 300px){
           .container{
             grid-template-columns: auto 1fr;
             grid-template-rows: auto 1fr auto;
             grid-template-areas:
               "advert header"
               "advert content"
               "advert footer";
           }
         } */
